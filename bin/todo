#!/bin/sh

source $(til import lib)
TODOFILE=$DOCS_ROOT/todo
LIST=''
ARGS=''
DEFAULT_LIST='general'
NUM_REGEX='^[0-9]+$'
SHOW_COMPLETE=0

LIST_AWK="
BEGIN {
   ln = 0;
}
/^[^\[]/ {

   if (length(list) == 0) {
      flag=1
      list_name=\$1
   }
   else if (\$1 == list)  { flag=1 }
   else                   { flag=0 };
   next
}
flag {
   if (length(list_name) > 0) {
      printf(\"   %s\n\", list_name);
      list_name=\"\"
   }
   ln++;
   printf(\"%2d: %s\n\", ln, \$0)
}
"
ADD_AWK="
BEGIN { in_list = 0; }
/^[^\[]/ {
   if (\$1 == list) { in_list = 1 }
   else if (in_list == 1) {
      printf(\"[ ] %s\\n\", item);
      in_list = 0;
   }
}
{ print }
END { if (in_list == 1) {
      printf(\"[ ] %s\\n\", item);
   } }
"

show_help $1 "til todo - til todo list handler

USAGE: til todo <add|finish|show> [-l sublist] [item]

Manages a TODO list (or lists) via the commands:
  add - adds either a new list or a new item
    -l|--list - specifies a sub list to add to

    NOTE: if no item is set and a list is set, a new list with that name is created

  edit - opens TODO list in an editor (for bulk actions)

  finish - marks a specified item (or list) as complete
    -l|--list - specifies a sub list to act on

    NOTE: if no item is set, the whole list specified will be marked complete

  show - lists all (or only a list's) items
    -l|--list     - specifies a sub list to show
    -c|--complete - will show completed items
"

show_lists() {
   cat $TODOFILE | grep -v '^$' | grep -v '^\[[ |x]\]'
}

show_list() {
   local AWK_ARGS=''

   if [[ $0 != 0 && ! -z "$1" ]]; then
      AWK_ARGS=" -v list=$1"
   fi

   if [[ "$SHOW_COMPLETE" == "1" ]]; then
      cat $TODOFILE | grep -v '^$' | awk $AWK_ARGS "$LIST_AWK"
   else
      cat $TODOFILE | grep -v '^$' | grep -v "\[x\]" | awk $AWK_ARGS "$LIST_AWK"
   fi
}

clean_list() {
   sed -i '/^$/d' $TODOFILE
}

parse_flags() {
   while (( 1 )); do
      case "$1" in
         "-l"|"--list")
            shift
            LIST=$1
            ;;
         "-c"|"--complete")
            SHOW_COMPLETE=1
            ;;
         *) break
            ;;
      esac

      shift
   done

   ARGS="$*"
}

case $1 in
   add|a)
      shift
      LIST=$DEFAULT_LIST
      parse_flags $*

      if [[ -z "$ARGS" ]]; then
         echo -e "$LIST\n" >> $TODOFILE
         echo "Creating list [$LIST]"
         clean_list
         exit 0
      fi
      ITEM="$ARGS"

      if ! grep -e "^$LIST$" $TODOFILE > /dev/null; then
         echo "$LIST has not been created yet, creating"
         echo -e "$LIST\n" >> $TODOFILE
         clean_list
      fi

      awk -v list=$LIST -v item="$ITEM" "$ADD_AWK" $TODOFILE > /tmp/todo
      echo "Adding [$ITEM] to list $LIST"
      mv /tmp/todo $TODOFILE
      clean_list
      ;;
   finish|f)
      shift
      parse_flags $*

      ITEM=$ARGS
      if [[ $ITEM =~ $NUM_REGEX ]]; then
         ITEM+="p"
         ITEM=$(show_list $LIST | grep ":" | sed -n "$ITEM" | cut -d':' -f2 | cut -d' ' -f2-)
      fi

      LINE_NUM=$(grep -n -m1 -F "$ITEM" $TODOFILE | cut -d':' -f1)
      LINE_NUM+="s"

      echo "Marking: [$(echo $ITEM)] as complete"
      sed -i -e "$LINE_NUM/\[ \]/\[x\]/" $TODOFILE
      ;;
   show|s)
      shift
      parse_flags $*

      show_list $LIST
      ;;
   edit|e)
      _edit $TODOFILE
      ;;
esac

git add $TODOFILE
